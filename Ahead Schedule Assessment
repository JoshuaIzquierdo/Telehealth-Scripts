import os
import pymysql
import pandas as pd
import pymysql
import pymongo
import pyodbc
from datetime import datetime, timedelta
import base64
import json
import urllib.request as urllib
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import (
    Mail, Attachment, FileContent, FileName,
    FileType, Disposition, ContentId)

### Ingredients
from cryptography.fernet import Fernet
from datetime import datetime
import configparser
import codecs

import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow,Flow
from google.auth.transport.requests import Request
import os
import pickle
import numpy as np
#change this by your sheet ID
SAMPLE_SPREADSHEET_ID_input = '12s6IvJrjXdWZbafxc91Lw0ZLMwMP6Tj5eOX1nQ7k5_0'


#change the range if needed
SAMPLE_RANGE_NAME_Updated = 'Trial Sheet 1'


def Create_Service(client_secret_file, api_service_name, api_version, *scopes):
    global service
    SCOPES = [scope for scope in scopes[0]]
    #print(SCOPES)
    
    cred = None

    if os.path.exists('token_write.pickle'):
        with open('token_write.pickle', 'rb') as token:
           cred = pickle.load(token)

    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, SCOPES)
            cred = flow.run_local_server()

        with open('token_write.pickle', 'wb') as token:
            pickle.dump(cred, token)

    try:
        service = build(api_service_name, api_version, credentials=cred)
        print(api_service_name, 'service created successfully')
        #return service
    except Exception as e:
        print(e)
        #return None
        
# change 'my_json_file.json' by your downloaded JSON file.
Create_Service('credentials.json', 'sheets', 'v4',['https://www.googleapis.com/auth/spreadsheets'])

#Clear Values in Spreadsheet
table = service.spreadsheets( ).values( ).get( spreadsheetId=SAMPLE_SPREADSHEET_ID_input, range=SAMPLE_RANGE_NAME_Updated,
                                                       ).execute( )


df = pd.DataFrame(table.get("values")[1:], columns=table.get("values")[0])
df = df.sort_values(by=['d','a'], ascending = [True, False])
df = df.drop_duplicates(subset='d', keep='last', inplace=False, ignore_index=False)

df.drop (['a','b','c','d'], 1, inplace=True)

import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow,Flow
from google.auth.transport.requests import Request
import os
import pickle
#change this by your sheet ID
SAMPLE_SPREADSHEET_ID_input = '12s6IvJrjXdWZbafxc91Lw0ZLMwMP6Tj5eOX1nQ7k5_0'
#change the range if needed
SAMPLE_RANGE_NAME_RAW = 'Final!A1'

def Create_Service(client_secret_file, api_service_name, api_version, *scopes):
    global service
    SCOPES = [scope for scope in scopes[0]]
    #print(SCOPES)
    cred = None
    if os.path.exists('token_write.pickle'):
        with open('token_write.pickle', 'rb') as token:
            cred = pickle.load(token)
    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, SCOPES)
            cred = flow.run_local_server()
        with open('token_write.pickle', 'wb') as token:
            pickle.dump(cred, token)
    try:
        service = build(api_service_name, api_version, credentials=cred)
        print(api_service_name, 'service created successfully')
        #return service
    except Exception as e:
        print(e)
        #return None
# change 'my_json_file.json' by your downloaded JSON file.
Create_Service('credentials.json', 'sheets', 'v4',['https://www.googleapis.com/auth/spreadsheets'])

#Clear Values in Spreadsheet
service.spreadsheets( ).values( ).clear( spreadsheetId=SAMPLE_SPREADSHEET_ID_input, range=SAMPLE_RANGE_NAME_RAW,
                                                       ).execute( )
def RAW_Data_truepill_SH():
    response_date = service.spreadsheets().values().update(
        spreadsheetId=SAMPLE_SPREADSHEET_ID_input,
        valueInputOption='RAW',
        range=SAMPLE_RANGE_NAME_RAW,
        body=dict(
            majorDimension='ROWS',
            values=df.T.reset_index().T.values.tolist())
    ).execute()
    print('RAW_Data successfully Updated')





RAW_Data_truepill_SH()

import os
import pymysql
import pandas as pd
import pymysql
import pymongo
import pyodbc
from datetime import datetime, timedelta
import base64
import json
import urllib.request as urllib
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import (
    Mail, Attachment, FileContent, FileName,
    FileType, Disposition, ContentId)

### Ingredients
from cryptography.fernet import Fernet
from datetime import datetime
import configparser
import codecs

import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow,Flow
from google.auth.transport.requests import Request
import os
import pickle
import numpy as np
#change this by your sheet ID
SAMPLE_SPREADSHEET_ID_input = '12s6IvJrjXdWZbafxc91Lw0ZLMwMP6Tj5eOX1nQ7k5_0'


#change the range if needed
SAMPLE_RANGE_NAME_Updated = 'Copy of Final'


def Create_Service(client_secret_file, api_service_name, api_version, *scopes):
    global service
    SCOPES = [scope for scope in scopes[0]]
    #print(SCOPES)
    
    cred = None

    if os.path.exists('token_write.pickle'):
        with open('token_write.pickle', 'rb') as token:
           cred = pickle.load(token)

    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, SCOPES)
            cred = flow.run_local_server()

        with open('token_write.pickle', 'wb') as token:
            pickle.dump(cred, token)

    try:
        service = build(api_service_name, api_version, credentials=cred)
        print(api_service_name, 'service created successfully')
        #return service
    except Exception as e:
        print(e)
        #return None
        
# change 'my_json_file.json' by your downloaded JSON file.
Create_Service('credentials.json', 'sheets', 'v4',['https://www.googleapis.com/auth/spreadsheets'])

#Clear Values in Spreadsheet
table = service.spreadsheets( ).values( ).get( spreadsheetId=SAMPLE_SPREADSHEET_ID_input, range=SAMPLE_RANGE_NAME_Updated,
                                                       ).execute( )


df = pd.DataFrame(table.get("values")[1:], columns=table.get("values")[0])
df = df[['State','New evals','Completed Evals',	'Cancellations'	,'Rescheduled',	'No show',	'Unfilled',	'Incomplete',	'Total'	,'Available hrs',	'White space hrs',	'Booked utilization',	'Completed',	'Completed utilization']]

df = df.drop([0, 1])

import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow,Flow
from google.auth.transport.requests import Request
import os
import pickle
#change this by your sheet ID
SAMPLE_SPREADSHEET_ID_input = '12s6IvJrjXdWZbafxc91Lw0ZLMwMP6Tj5eOX1nQ7k5_0'
#change the range if needed
SAMPLE_RANGE_NAME_RAW = 'Summary!A1'

def Create_Service(client_secret_file, api_service_name, api_version, *scopes):
    global service
    SCOPES = [scope for scope in scopes[0]]
    #print(SCOPES)
    cred = None
    if os.path.exists('token_write.pickle'):
        with open('token_write.pickle', 'rb') as token:
            cred = pickle.load(token)
    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, SCOPES)
            cred = flow.run_local_server()
        with open('token_write.pickle', 'wb') as token:
            pickle.dump(cred, token)
    try:
        service = build(api_service_name, api_version, credentials=cred)
        print(api_service_name, 'service created successfully')
        #return service
    except Exception as e:
        print(e)
        #return None
# change 'my_json_file.json' by your downloaded JSON file.
Create_Service('credentials.json', 'sheets', 'v4',['https://www.googleapis.com/auth/spreadsheets'])

#Clear Values in Spreadsheet
service.spreadsheets( ).values( ).clear( spreadsheetId=SAMPLE_SPREADSHEET_ID_input, range=SAMPLE_RANGE_NAME_RAW,
                                                       ).execute( )
def RAW_Data_truepill_SH():
    response_date = service.spreadsheets().values().update(
        spreadsheetId=SAMPLE_SPREADSHEET_ID_input,
        valueInputOption='RAW',
        range=SAMPLE_RANGE_NAME_RAW,
        body=dict(
            majorDimension='ROWS',
            values=df.T.reset_index().T.values.tolist())
    ).execute()
    print('RAW_Data successfully Updated')

RAW_Data_truepill_SH()

import os
import pymysql
import pandas as pd
import pymysql
import pymongo
import pyodbc
from datetime import datetime, timedelta
import base64
import json
import urllib.request as urllib
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import (
    Mail, Attachment, FileContent, FileName,
    FileType, Disposition, ContentId)

### Ingredients
from cryptography.fernet import Fernet
from datetime import datetime
import configparser
import codecs

import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow,Flow
from google.auth.transport.requests import Request
import os
import pickle
import numpy as np
#change this by your sheet ID
SAMPLE_SPREADSHEET_ID_input = '12s6IvJrjXdWZbafxc91Lw0ZLMwMP6Tj5eOX1nQ7k5_0'


#change the range if needed
SAMPLE_RANGE_NAME_Updated = 'Summary'


def Create_Service(client_secret_file, api_service_name, api_version, *scopes):
    global service
    SCOPES = [scope for scope in scopes[0]]
    #print(SCOPES)
    
    cred = None

    if os.path.exists('token_write.pickle'):
        with open('token_write.pickle', 'rb') as token:
           cred = pickle.load(token)

    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, SCOPES)
            cred = flow.run_local_server()

        with open('token_write.pickle', 'wb') as token:
            pickle.dump(cred, token)

    try:
        service = build(api_service_name, api_version, credentials=cred)
        print(api_service_name, 'service created successfully')
        #return service
    except Exception as e:
        print(e)
        #return None
        
# change 'my_json_file.json' by your downloaded JSON file.
Create_Service('credentials.json', 'sheets', 'v4',['https://www.googleapis.com/auth/spreadsheets'])

#Clear Values in Spreadsheet
table = service.spreadsheets( ).values( ).get( spreadsheetId=SAMPLE_SPREADSHEET_ID_input, range=SAMPLE_RANGE_NAME_Updated,
                                                       ).execute( )


df = pd.DataFrame(table.get("values")[1:], columns=table.get("values")[0])

df2 = df[['New evals','Completed Evals']]
df2 = df2.loc[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]]

new_header = df2.iloc[0] #grab the first row for the header
df2 = df2[1:] #take the data less the header row
df2.columns = new_header
import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow,Flow
from google.auth.transport.requests import Request
import os
import pickle
#change this by your sheet ID
SAMPLE_SPREADSHEET_ID_input = '1VCK40bjcN2etRk2Har3FGX0_9G8mxrIDJlQItIwazD0'
#change the range if needed
SAMPLE_RANGE_NAME_RAW = 'State data!C'+ row_num_str

def Create_Service(client_secret_file, api_service_name, api_version, *scopes):
    global service
    SCOPES = [scope for scope in scopes[0]]
    #print(SCOPES)
    cred = None
    if os.path.exists('token_write.pickle'):
        with open('token_write.pickle', 'rb') as token:
            cred = pickle.load(token)
    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, SCOPES)
            cred = flow.run_local_server()
        with open('token_write.pickle', 'wb') as token:
            pickle.dump(cred, token)
    try:
        service = build(api_service_name, api_version, credentials=cred)
        print(api_service_name, 'service created successfully')
        #return service
    except Exception as e:
        print(e)
        #return None
# change 'my_json_file.json' by your downloaded JSON file.
Create_Service('credentials.json', 'sheets', 'v4',['https://www.googleapis.com/auth/spreadsheets'])

#Clear Values in Spreadsheet
service.spreadsheets( ).values( ).clear( spreadsheetId=SAMPLE_SPREADSHEET_ID_input, range=SAMPLE_RANGE_NAME_RAW,
                                                       ).execute( )
def RAW_Data_truepill_SH():
    response_date = service.spreadsheets().values().update(
        spreadsheetId=SAMPLE_SPREADSHEET_ID_input,
        valueInputOption='RAW',
        range=SAMPLE_RANGE_NAME_RAW,
        body=dict(
            majorDimension='ROWS',
            values=df2.T.reset_index().T.values.tolist())
    ).execute()
    print('RAW_Data successfully Updated')

RAW_Data_truepill_SH()

df3 = df[['Cancellations','Rescheduled','No show',	'Unfilled',	'Incomplete',	'Total','Available hrs','White space hrs',	'Booked utilization',	'Completed']]
df3 = df3.loc[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]]

new_header = df3.iloc[0] #grab the first row for the header
df3 = df3[1:] #take the data less the header row
df3.columns = new_header

import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow,Flow
from google.auth.transport.requests import Request
import os
import pickle
#change this by your sheet ID
SAMPLE_SPREADSHEET_ID_input = '1VCK40bjcN2etRk2Har3FGX0_9G8mxrIDJlQItIwazD0'
#change the range if needed
SAMPLE_RANGE_NAME_RAW = 'State data!F' + row_num_str

def Create_Service(client_secret_file, api_service_name, api_version, *scopes):
    global service
    SCOPES = [scope for scope in scopes[0]]
    #print(SCOPES)
    cred = None
    if os.path.exists('token_write.pickle'):
        with open('token_write.pickle', 'rb') as token:
            cred = pickle.load(token)
    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, SCOPES)
            cred = flow.run_local_server()
        with open('token_write.pickle', 'wb') as token:
            pickle.dump(cred, token)
    try:
        service = build(api_service_name, api_version, credentials=cred)
        print(api_service_name, 'service created successfully')
        #return service
    except Exception as e:
        print(e)
        #return None
# change 'my_json_file.json' by your downloaded JSON file.
Create_Service('credentials.json', 'sheets', 'v4',['https://www.googleapis.com/auth/spreadsheets'])

#Clear Values in Spreadsheet
service.spreadsheets( ).values( ).clear( spreadsheetId=SAMPLE_SPREADSHEET_ID_input, range=SAMPLE_RANGE_NAME_RAW,
                                                       ).execute( )
def RAW_Data_truepill_SH():
    response_date = service.spreadsheets().values().update(
        spreadsheetId=SAMPLE_SPREADSHEET_ID_input,
        valueInputOption='RAW',
        range=SAMPLE_RANGE_NAME_RAW,
        body=dict(
            majorDimension='ROWS',
            values=df3.T.reset_index().T.values.tolist())
    ).execute()
    print('RAW_Data successfully Updated')

RAW_Data_truepill_SH()

rf = open('Row_Num.txt', 'r')
Row_Num = rf.read()
rf.close()
Row_Num_int = int(Row_Num)
Row_Num_int += 16

row_num_str = str(Row_Num_int)
wf = open('Row_Num.txt','w')
wf.write(row_num_str)
wf.close()
rf = open('Row_Num.txt', 'r')
print(rf.read())
rf.close()

rf = open('Row_Num.txt', 'r')
print(rf.read())
rf.close()

#Reset Row_num back to 339
wf = open('Row_Num.txt','w')
wf.write("339")
wf.close()
rf = open('Row_Num.txt', 'r')
print(rf.read())
rf.close()

rf = open('Row_Num.txt', 'r')
Row_Num = rf.read()
rf.close()
Row_Num_int = int(Row_Num)

row_num_str = str(Row_Num_int)
wf = open('Row_Num.txt','w')
wf.write(row_num_str)
wf.close()
rf = open('Row_Num.txt', 'r')
print(rf.read())
rf.close()

import os
import pymysql
import pandas as pd
import pymysql
import pymongo
import pyodbc
from datetime import datetime, timedelta
import base64
import json
import urllib.request as urllib
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import (
    Mail, Attachment, FileContent, FileName,
    FileType, Disposition, ContentId)

### Ingredients
from cryptography.fernet import Fernet
from datetime import datetime
import configparser
import codecs

import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow,Flow
from google.auth.transport.requests import Request
import os
import pickle
import numpy as np
#change this by your sheet ID
SAMPLE_SPREADSHEET_ID_input = '12s6IvJrjXdWZbafxc91Lw0ZLMwMP6Tj5eOX1nQ7k5_0'


#change the range if needed
SAMPLE_RANGE_NAME_Updated = 'Trial Sheet 1'


def Create_Service(client_secret_file, api_service_name, api_version, *scopes):
    global service
    SCOPES = [scope for scope in scopes[0]]
    #print(SCOPES)
    
    cred = None

    if os.path.exists('token_write.pickle'):
        with open('token_write.pickle', 'rb') as token:
           cred = pickle.load(token)

    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, SCOPES)
            cred = flow.run_local_server()

        with open('token_write.pickle', 'wb') as token:
            pickle.dump(cred, token)

    try:
        service = build(api_service_name, api_version, credentials=cred)
        print(api_service_name, 'service created successfully')
        #return service
    except Exception as e:
        print(e)
        #return None
        
# change 'my_json_file.json' by your downloaded JSON file.
Create_Service('credentials.json', 'sheets', 'v4',['https://www.googleapis.com/auth/spreadsheets'])

#Clear Values in Spreadsheet
table = service.spreadsheets( ).values( ).get( spreadsheetId=SAMPLE_SPREADSHEET_ID_input, range=SAMPLE_RANGE_NAME_Updated,
                                                       ).execute( )


df = pd.DataFrame(table.get("values")[1:], columns=table.get("values")[0])

df
df = df.sort_values(by=['d','a'], ascending = [True, False])
df
df = df.drop_duplicates(subset='d', keep='last', inplace=False, ignore_index=False)
df.drop (['a','b','c','d'], 1, inplace=True)
import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow,Flow
from google.auth.transport.requests import Request
import os
import pickle
#change this by your sheet ID
SAMPLE_SPREADSHEET_ID_input = '12s6IvJrjXdWZbafxc91Lw0ZLMwMP6Tj5eOX1nQ7k5_0'
#change the range if needed
SAMPLE_RANGE_NAME_RAW = 'Final!A1'

def Create_Service(client_secret_file, api_service_name, api_version, *scopes):
    global service
    SCOPES = [scope for scope in scopes[0]]
    #print(SCOPES)
    cred = None
    if os.path.exists('token_write.pickle'):
        with open('token_write.pickle', 'rb') as token:
            cred = pickle.load(token)
    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, SCOPES)
            cred = flow.run_local_server()
        with open('token_write.pickle', 'wb') as token:
            pickle.dump(cred, token)
    try:
        service = build(api_service_name, api_version, credentials=cred)
        print(api_service_name, 'service created successfully')
        #return service
    except Exception as e:
        print(e)
        #return None
# change 'my_json_file.json' by your downloaded JSON file.
Create_Service('credentials.json', 'sheets', 'v4',['https://www.googleapis.com/auth/spreadsheets'])

#Clear Values in Spreadsheet
service.spreadsheets( ).values( ).clear( spreadsheetId=SAMPLE_SPREADSHEET_ID_input, range=SAMPLE_RANGE_NAME_RAW,
                                                       ).execute( )
def RAW_Data_truepill_SH():
    response_date = service.spreadsheets().values().update(
        spreadsheetId=SAMPLE_SPREADSHEET_ID_input,
        valueInputOption='RAW',
        range=SAMPLE_RANGE_NAME_RAW,
        body=dict(
            majorDimension='ROWS',
            values=df.T.reset_index().T.values.tolist())
    ).execute()
    print('RAW_Data successfully Updated')





RAW_Data_truepill_SH()
import os
import pymysql
import pandas as pd
import pymysql
import pymongo
import pyodbc
from datetime import datetime, timedelta
import base64
import json
import urllib.request as urllib
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import (
    Mail, Attachment, FileContent, FileName,
    FileType, Disposition, ContentId)

### Ingredients
from cryptography.fernet import Fernet
from datetime import datetime
import configparser
import codecs

import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow,Flow
from google.auth.transport.requests import Request
import os
import pickle
import numpy as np
#change this by your sheet ID
SAMPLE_SPREADSHEET_ID_input = '12s6IvJrjXdWZbafxc91Lw0ZLMwMP6Tj5eOX1nQ7k5_0'


#change the range if needed
SAMPLE_RANGE_NAME_Updated = 'Copy of Final'


def Create_Service(client_secret_file, api_service_name, api_version, *scopes):
    global service
    SCOPES = [scope for scope in scopes[0]]
    #print(SCOPES)
    
    cred = None

    if os.path.exists('token_write.pickle'):
        with open('token_write.pickle', 'rb') as token:
           cred = pickle.load(token)

    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, SCOPES)
            cred = flow.run_local_server()

        with open('token_write.pickle', 'wb') as token:
            pickle.dump(cred, token)

    try:
        service = build(api_service_name, api_version, credentials=cred)
        print(api_service_name, 'service created successfully')
        #return service
    except Exception as e:
        print(e)
        #return None
        
# change 'my_json_file.json' by your downloaded JSON file.
Create_Service('credentials.json', 'sheets', 'v4',['https://www.googleapis.com/auth/spreadsheets'])

#Clear Values in Spreadsheet
table = service.spreadsheets( ).values( ).get( spreadsheetId=SAMPLE_SPREADSHEET_ID_input, range=SAMPLE_RANGE_NAME_Updated,
                                                       ).execute( )


df = pd.DataFrame(table.get("values")[1:], columns=table.get("values")[0])

df = df[['State','New evals','Completed Evals',	'Cancellations'	,'Rescheduled',	'No show',	'Unfilled',	'Incomplete',	'Total'	,'Available hrs',	'White space hrs',	'Booked utilization',	'Completed',	'Completed utilization']]
df = df.drop([0, 1])
import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow,Flow
from google.auth.transport.requests import Request
import os
import pickle
#change this by your sheet ID
SAMPLE_SPREADSHEET_ID_input = '12s6IvJrjXdWZbafxc91Lw0ZLMwMP6Tj5eOX1nQ7k5_0'
#change the range if needed
SAMPLE_RANGE_NAME_RAW = 'Summary!A1'

def Create_Service(client_secret_file, api_service_name, api_version, *scopes):
    global service
    SCOPES = [scope for scope in scopes[0]]
    #print(SCOPES)
    cred = None
    if os.path.exists('token_write.pickle'):
        with open('token_write.pickle', 'rb') as token:
            cred = pickle.load(token)
    if not cred or not cred.valid:
        if cred and cred.expired and cred.refresh_token:
            cred.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, SCOPES)
            cred = flow.run_local_server()
        with open('token_write.pickle', 'wb') as token:
            pickle.dump(cred, token)
    try:
        service = build(api_service_name, api_version, credentials=cred)
        print(api_service_name, 'service created successfully')
        #return service
    except Exception as e:
        print(e)
        #return None
# change 'my_json_file.json' by your downloaded JSON file.
Create_Service('credentials.json', 'sheets', 'v4',['https://www.googleapis.com/auth/spreadsheets'])

#Clear Values in Spreadsheet
service.spreadsheets( ).values( ).clear( spreadsheetId=SAMPLE_SPREADSHEET_ID_input, range=SAMPLE_RANGE_NAME_RAW,
                                                       ).execute( )
def RAW_Data_truepill_SH():
    response_date = service.spreadsheets().values().update(
        spreadsheetId=SAMPLE_SPREADSHEET_ID_input,
        valueInputOption='RAW',
        range=SAMPLE_RANGE_NAME_RAW,
        body=dict(
            majorDimension='ROWS',
            values=df.T.reset_index().T.values.tolist())
    ).execute()
    print('RAW_Data successfully Updated')

RAW_Data_truepill_SH()



